MakerCtrl = {}

-- 预制体上的UISubObject脚本，内含所有UI对象
MakerCtrl.Panel = nil

local Tag1 = "Food"
local Tag2 = "Item"
local Tag3 = "Equipment"

local SortWay1 = "Level"
local SortWay2 = "Price"

-- 当前选中的道具
MakerCtrl.CurrentItem = nil
-- 当前选择的英雄
MakerCtrl.CurrentHero = nil

function MakerCtrl:Init()
    print("进入制品手造")

    -- 记录筛选条件
    MakerCtrl.Tag = Tag1
    -- 记录排序条件
    MakerCtrl.SortWay = SortWay1
    MakerCtrl.ChangeWay = 1

    -- 当前选中的道具
    MakerCtrl.CurrentItem = nil
    -- 当前选择的英雄
    if PlayerDataModel.PlayerData.SynInsInfo.HeroID ~= "" then
        for k,v in pairs(PlayerDataModel.CompletePlayerData.Heros) do
            if v.HeroID == PlayerDataModel.PlayerData.SynInsInfo.HeroID then
                MakerCtrl.CurrentHero = ModelTool:CopyTable(v)
                break
            end
        end
    else
        MakerCtrl.CurrentHero = nil
    end

    -- 当前正在合成的道具
    MakerCtrl.CurrentSynItems = PlayerDataModel.PlayerData.SynInsInfo.SynItems

    self.Panel = LoadManager:Load(ABManager:LoadAsset("prefab", "FabricateUI"), "UI", true):GetComponent("UISubObject")

    -- 加载视图程序
    LoadManager:LoadLua("Maker", "MakerView")
    self:UpdatePanelInfo()

    -- 返回按钮
    self.Panel.buttons[0].onClick:AddListener(
        function()
            for k,v in pairs(PlayerDataModel.PlayerData.SynInsInfo.SynItems) do
                Core.updateEvent[("ShowSyn" .. v.ItemID)] = nil
            end
            UICtrl:Back2MainScene()
        end
    )
    -- 选择英雄按钮
    self.Panel.buttons[1].onClick:AddListener(
        function()
            self:ShowHerosWindow()
        end
    )
    -- 合成按钮
    self.Panel.buttons[2].onClick:AddListener(
        function()
            self:SynItem(self.CurrentItem)
        end
    )
    self.Panel.buttons[2].interactable = false

    -- 筛选1：食物
    self.Panel.toggles[0].onValueChanged:AddListener(
        function(isTrue)
            if isTrue == true then
                self.Tag = Tag1
                self.CurrentItem = nil
            end
            self:UpdatePanelInfo()
        end
    )
    -- 筛选2：道具
    self.Panel.toggles[1].onValueChanged:AddListener(
        function(isTrue)
            if isTrue == true then
                self.Tag = Tag2
                self.CurrentItem = nil
            end
            self:UpdatePanelInfo()
        end
    )
    -- 筛选3：武器
    self.Panel.toggles[2].onValueChanged:AddListener(
        function(isTrue)
            if isTrue == true then
                self.Tag = Tag3
                self.CurrentItem = nil
            end
            self:UpdatePanelInfo()
        end
    )

    -- 排序1：等级
    self.Panel.toggles[3].onValueChanged:AddListener(
        function(isTrue)
            if self.SortWay == SortWay2 then
                self.SortWay = SortWay1
                self.ChangeWay = 1
            else
                self.ChangeWay = self.ChangeWay * (-1)
            end
            self:ShowRightItems()
        end
    )
    -- 排序2：价格
    self.Panel.toggles[4].onValueChanged:AddListener(
        function(isTrue)
            if self.SortWay == SortWay1 then
                self.SortWay = SortWay2
                self.ChangeWay = 1
            else
                self.ChangeWay = self.ChangeWay * (-1)
            end
            self:ShowRightItems()
        end
    )

    LoadManager:LoadLua("Maker", "HeroChoiceCtrl")
    HeroChoiceCtrl:Init()

end


--[[
    @desc: 显示英雄选择窗口
]]
function MakerCtrl:ShowHerosWindow()
    -- 对英雄列表进行排序
    local _herosList = {}
    if self.Tag == Tag1 then
        _herosList = StaticDataModel:SortHeroByInsBuff(PlayerDataModel.CompletePlayerData.Heros, "2")
    elseif self.Tag == Tag2 then
        _herosList = StaticDataModel:SortHeroByInsBuff(PlayerDataModel.CompletePlayerData.Heros, "3")
    elseif self.Tag == Tag3 then
        _herosList = StaticDataModel:SortHeroByInsBuff(PlayerDataModel.CompletePlayerData.Heros, "4", "5", "6", "7", "8", "9")
    end
    HeroChoiceCtrl:ShowHeros(_herosList, self.CurrentHero)

    -- 调用动画
    self.Panel.go[10]:GetComponent("FabricateROLEAnimation"):ROLEEnterAnimate()
end


-- 判断此道具目前是否可合成
-- 参数1(string)：需要进行判断的合成物ID
local function CheckCouldSyn(synItemID)
    -- 最终结果
    local result = false

    -- 遍历静态策划表，获取此装备合成所需的道具列表
    local _needsList = nil
    for _, v in pairs(StaticDataModel.ItemsTable) do
        if v.ItemID == synItemID then
            _needsList = ModelTool:SplitStr(v.SynNeeds)
            break
        end
    end

    if _needsList == nil then
        print("_needsList为空，未得到合成此道具所需的物品")
        return
    end

    -- 匹配数 满足一个条件+1
    local rightCount = 0
    -- 遍历所需物品(由于SynNeeds的格式为ID,C,ID,C,ID,C，所以需要除以2)
    for i = 1, #(_needsList) / 2, 1 do
        -- 遍历玩家目前的所有道具
        for k, v in pairs(PlayerDataModel.PlayerData.Items) do
            -- 如果ID匹配，且数量满足
            if v.ItemID == _needsList[2 * i - 1] and v.IsOnShelf == "false" and tonumber(v.Count) >= tonumber(_needsList[2 * i]) then
                -- 匹配数+1
                rightCount = rightCount + 1
            end
        end
    end

    -- print("rightCount:" .. rightCount)
    -- 匹配数满足，则true
    if rightCount == #(_needsList) / 2 then
        result = true
    end

    return result
end


--[[
    @desc: 检查每一个道具是否可以合成
    --@items: 当前所有需要显示的道具列表
]]
function MakerCtrl:CheckAllSyn(items)
    for k, v in pairs(items) do
        items[k].CouldSyn = tostring(CheckCouldSyn(v.ItemID))
    end
end


--[[
    @desc: 依序显示当前条件下的所有道具
]]
function MakerCtrl:ShowRightItems()
    -- 筛选符合条件的道具
    local itemsList = {}

    if self.Tag == Tag1 then
        itemsList = StaticDataModel:ScreenList(StaticDataModel.ItemsTable, "Type", 1, "2")
    elseif self.Tag == Tag2 then
        itemsList = StaticDataModel:ScreenList(StaticDataModel.ItemsTable, "Type", 1, "3")
    elseif self.Tag == Tag3 then
        itemsList = StaticDataModel:ScreenList(StaticDataModel.ItemsTable, "Type", 1, "4","5","6","7","8","9")
    end
    itemsList = StaticDataModel:ScreenItemByObMethod(itemsList, "4")

    -- 判断是否可合成
    self:CheckAllSyn(itemsList)
    
    -- 对道具列表进行排序
    local _list1,_list2 = StaticDataModel:ScreenList(itemsList, "CouldSyn", 1, "true")
    --print(#_list1 .. " " .. #_list2)
    StaticDataModel:SortItem(_list1, self.SortWay, self.ChangeWay)
    StaticDataModel:SortItem(_list2, self.SortWay, self.ChangeWay)
    itemsList = ModelTool:MergeTable(_list1,_list2)

    -- 显示每一个道具
    MakerView:ShowItemsList(itemsList)
end


--[[
    @desc: 显示左边 所需的合成品 及 合成键
    --@itemData: 当前选中的道具信息
]]
function MakerCtrl:ShowLeftSynNeeds(itemData)
    local needsList = {}

    if itemData == nil then
        needsList = ""
        MakerCtrl.Panel.buttons[2].interactable = false
    else
        needsList = itemData.SynNeeds
        itemData.CouldSyn = CheckCouldSyn(itemData.ItemID)
        if itemData.CouldSyn == "true" then
            MakerCtrl.Panel.buttons[2].interactable = true
        else
            MakerCtrl.Panel.buttons[2].interactable = false
        end
    end

    MakerView:ShowSynNeeds(needsList)
end


--[[
    @desc: 刷新整个界面的信息显示
]]
function MakerCtrl:UpdatePanelInfo()
    self:ShowLeftSynNeeds(self.CurrentItem)
    self:ChangeHero(self.CurrentHero)
    self:ShowRightItems()
    self:UpdateSynItems()
end


--[[
    @desc: 切换英雄并显示
    --@heroData: 英雄信息
]]
function MakerCtrl:ChangeHero(heroData)
    self.CurrentHero = heroData
    if self.CurrentHero ~= nil then
        PlayerDataModel.PlayerData.SynInsInfo.HeroID = self.CurrentHero.HeroID
    else
        PlayerDataModel.PlayerData.SynInsInfo.HeroID = ""
    end
    MakerView:ShowHeroChoice(self.CurrentHero)
end

--[[
    @desc: 合成新的道具，扣除相应所需道具
]]
function MakerCtrl:SynItem(itemData)
    
    local _needsList = ModelTool:SplitStr(itemData.SynNeeds)

    -- 遍历所需物品(由于SynNeeds的格式为ID,C,ID,C,ID,C，所以需要除以2)
    for i = 1, #(_needsList) / 2, 1 do
        -- 扣除所需物品
        PlayerDataModel:RemoveNormalItem(_needsList[2*i-1] , _needsList[2*i] , false)
    end

    -- 添加正在合成的道具
    PlayerDataModel:AddSynItem(itemData.ItemID)

    -- 刷新界面
    self:UpdatePanelInfo()
    
end


function MakerCtrl:UpdateSynItems()
    MakerView:ShowSynItermsList(PlayerDataModel.CompletePlayerData.SynInsInfo.SynItems)
end


function MakerCtrl:SynCdTimerEvent(synItem)
    local itemData = {}
    for k,v in pairs(PlayerDataModel.CompletePlayerData.SynInsInfo.SynItems) do
        if v.ItemID == synItem._Data.ItemID then
            itemData = v
            break
        end
    end
    if tonumber(itemData.SynTimer) >= tonumber(itemData.SynTime) then
        synItem._UISub.images[0].fillAmount = 1
        CS.UnityEngine.Object.Destroy(synItem._Obj)
        Core.updateEvent[("ShowSyn" .. itemData.ItemID)] = nil
    else
        synItem._UISub.images[0].fillAmount = itemData.SynTimer/itemData.SynTime
    end

end

