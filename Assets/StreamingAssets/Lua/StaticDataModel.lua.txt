StaticDataModel = {}

-- 所有的静态策划表
StaticDataModel.ItemsTable = {}
StaticDataModel.HerosTable = {}
StaticDataModel.MonstersTable = {}
StaticDataModel.NPCsTable = {}

-- 读取 所有的静态策划表
function StaticDataModel:ReadOut()
    -- 读取道具静态表
    local ta = ABManager:LoadAsset("json", "ItemsTable")
    self.ItemsTable = JsonUtil.decode(ta.text)
    ModelTool:SetMeta(StaticDataModel.ItemsTable)

    -- 读取英雄静态表
    ta = ABManager:LoadAsset("json", "HerosTable")
    self.HerosTable = JsonUtil.decode(ta.text)
    ModelTool:SetMeta(StaticDataModel.HerosTable)

    -- 读取怪物静态表
    ta = ABManager:LoadAsset("json", "MonstersTable")
    self.MonstersTable = JsonUtil.decode(ta.text)
    ModelTool:SetMeta(StaticDataModel.MonstersTable)

    -- 读取怪物静态表
    ta = ABManager:LoadAsset("json", "NPCsTable")
    self.NPCsTable = JsonUtil.decode(ta.text)
    ModelTool:SetMeta(StaticDataModel.NPCsTable)
end

-- 合并出 完整的玩家数据信息
function StaticDataModel:MergeData(playerData)
    local finalData = {}

    finalData.User = playerData.User
    finalData.Password = playerData.Password
    finalData.Name = playerData.Name
    finalData.TexturePath = playerData.TexturePath
    finalData.StoreLevel = playerData.StoreLevel
    finalData.Money = playerData.Money
    finalData.Diamond = playerData.Diamond

    finalData.Heros = {}
    -- 合并完整的英雄信息表
    for i = 1, #playerData.Heros do
        for j = 1, #self.HerosTable do
            -- 如果ID匹配，则合并信息
            if playerData.Heros[i].HeroID == self.HerosTable[j].HeroID then
                local heroNow = {}
                -- 动态表的数据
                heroNow.HeroID = playerData.Heros[i].HeroID
                heroNow.Level = playerData.Heros[i].Level
                heroNow.EnergyMax = playerData.Heros[i].EnergyMax
                heroNow.EnergyNow = playerData.Heros[i].EnergyNow
                heroNow.ColBuff = playerData.Heros[i].ColBuff
                heroNow.ColBuffTem = playerData.Heros[i].ColBuffTem
                heroNow.InsBuff = playerData.Heros[i].InsBuff
                heroNow.Equips = {}
                for k = 1, #playerData.Heros[i].Equips do
                    for v = 1, #self.ItemsTable do
                        if playerData.Heros[i].Equips[k].ItemID == self.ItemsTable[v].ItemID then
                            table.insert(heroNow.Equips, self.ItemsTable[v])
                        end
                    end
                end

                -- 静态表的数据
                heroNow.Name = self.HerosTable[j].Name
                heroNow.Age = self.HerosTable[j].Age
                heroNow.Gender = self.HerosTable[j].Gender
                heroNow.TexturePath = self.HerosTable[j].TexturePath
                heroNow.Speak1 = self.HerosTable[j].Speak1
                heroNow.Speak2 = self.HerosTable[j].Speak2

                table.insert(finalData.Heros, heroNow)
                break
            end
        end
    end

    finalData.Items = {}
    -- 合并完整的道具信息表
    for i = 1, #playerData.Items do
        for j = 1, #self.ItemsTable do
            -- 如果ID匹配，则合并信息
            if playerData.Items[i].ItemID == self.ItemsTable[j].ItemID then
                local itemNow = {}
                -- 动态表的数据
                itemNow.ItemID = playerData.Items[i].ItemID
                itemNow.Count = playerData.Items[i].Count
                -- 静态表的数据
                itemNow.Name = self.ItemsTable[j].Name
                itemNow.TexturePath = self.ItemsTable[j].TexturePath
                itemNow.Type = self.ItemsTable[j].Type
                itemNow.Level = self.ItemsTable[j].Level
                itemNow.ObMethods = self.ItemsTable[j].ObMethods
                itemNow.Price = self.ItemsTable[j].Price
                itemNow.HeroBuff = self.ItemsTable[j].HeroBuff
                itemNow.SuitID = self.ItemsTable[j].SuitID
                itemNow.SynNeeds = self.ItemsTable[j].SynNeeds
                itemNow.SynTime = self.ItemsTable[j].SynTime
                itemNow.Description = self.ItemsTable[j].Description

                table.insert(finalData.Items, itemNow)
                break
            end
        end
    end

    -- 返回 完整的玩家数据表
    return finalData
end

--[[
    @desc: 道具排序
    author:{author}
    time:2019-08-08 20:03:25
    --@items: 道具列表
	--@key1: 第一层排序的key（"CouldSyn" / "Type"）
	--@value1: 第一层排序的value 需要放在前面的值（"true" / "1"）
	--@key2: 第二层排序的key（"Level" / "Price"）
	--@changeWay: 第二层排序的升序降序（ 1 / -1 ）
    @return:
]]
function StaticDataModel:SortItems(items, key1,value1, key2,changeWay)
    for i = 1, #items do
        for j = 1, #items - i do
            -- 第一层排序
            if items[j][key1] ~= value1 and items[j+1][key1] == value1 then
                -- print(items[j][key1] .. " " .. items[j+1][key1])
                -- print("change")
                items[j], items[j + 1] = items[j + 1], items[j]
            -- 第二层排序
            elseif items[j][key1] == items[j+1][key1] and ( (tonumber(items[j][key2]) - tonumber(items[j + 1][key2])) * changeWay ) > 0 then
                -- print((items[j][key2]) .. " " .. (items[j + 1][key2]))
                -- print("change")
                items[j], items[j + 1] = items[j + 1], items[j]
            -- 第三层排序 ID
            elseif ( (tonumber(items[j][key2]) - tonumber(items[j + 1][key2])) * changeWay ) == 0 and ( tonumber(items[j].ItemID) - tonumber(items[j + 1].ItemID) ) > 0 then
                -- print(items[j].ItemID .. " " .. items[j+1].ItemID)
                -- print("change")
                items[j], items[j + 1] = items[j + 1], items[j]
            end
        end
    end
end

--[[
    @desc: 筛选道具
    author:{Jason}
    time:2019-08-07 20:53:57
    --@items:table：道具表
	--@key:string：要筛选的key
	--@value: string：要筛选的value
    @return:table：只包含指定key value的新table
]]
-- function StaticDataModel:ScreenItem(items, key, value)
--     local newTable = {}
--     local count = 1
--     for k,v in pairs(items) do
--         if v[key] == value then
--             newTable[count] = v
--             count = count + 1
--         end
--     end
--     return newTable
-- end

function StaticDataModel:ScreenList(list, key, index, ...)
    -- 1.满足条件的
    local newTable1 = {}
    -- 2.不满足条件的
    local newTable2 = {}
    -- 3.满足条件+不满足条件
    local newTable3 = {}
    for k, v in pairs(list) do
        local _strs = ModelTool:SplitStr(v[key])
        for i = 1, select("#", ...) do
            if _strs[index] == select(i, ...) then
                table.insert(newTable1, v)
            elseif i == select("#", ...) then
                table.insert(newTable2, v)
            end
        end
    end
    newTable3 = ModelTool:MergeTable(newTable1,newTable2)
    return newTable1,newTable2,newTable3
end

