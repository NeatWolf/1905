MapModel = {}

MapModel.data = {}
MapModel.data.role = {} -- 数组形式四个角色ID
MapModel.data.energy = 0 -- 总体力
MapModel.data.currentEnergy = 0 -- 当前体力
MapModel.data.lucky = 0 -- 品质爆率
MapModel.data.efficiency = 0 -- 数量爆率
MapModel.data.time = 1 -- 时间系数
ModelTool:SetMeta(MapModel.data)

function MapModel:LoadData()
    -- 总体力 = 所有角色的体力上限 + 所有角色身上的装备加成
    self.data.energy = 0
    -- 当前 = 所有角色的当前体力
    self.data.currentEnergy = 0
    -- 装备 + & 英雄 *
    self.data.lucky = 1
    self.data.efficiency = 1
    -- 英雄 *
    self.data.time = 1

    local roleDatas = StaticDataModel:ScreenList(PlayerDataModel.CompletePlayerData.Heros, "HeroID", 1, self.data.role[1], self.data.role[2], self.data.role[3], self.data.role[4])
    for k, v in pairs(roleDatas) do
        -- 英雄
        self.data.energy = self.data.energy + tonumber(v.EnergyMax)
        self.data.currentEnergy = self.data.currentEnergy + tonumber(v.EnergyNow)

        local colBuff = ModelTool:SplitStr(v.ColBuff)
        self.data.efficiency = self.data.efficiency * tonumber(colBuff[1])
        self.data.lucky = self.data.lucky * tonumber(colBuff[2])
        self.data.time = self.data.time * tonumber(colBuff[3])
        -- 装备
        for kItem, vItem in pairs(v.Equips) do
            local heroBuff = ModelTool:SplitStr(vItem.HeroBuff)
            self.data.energy = self.data.energy + tonumber(heroBuff[1])
            self.data.efficiency = self.data.efficiency + tonumber(heroBuff[3])
            self.data.lucky = self.data.lucky + tonumber(heroBuff[4])
        end
    end
end

function MapModel:InCombat( )
    local time = 0
    -- 确定时间
if level == "Normal" then
end
-- 确定掉落

return time
end