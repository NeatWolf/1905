PlayerDataModel = {}
-- 可读写路径
PlayerDataModel.FilePath = CS.UnityEngine.Application.persistentDataPath .. "/AccountData.json"
--print(CS.UnityEngine.Application.persistentDataPath)

-- 玩家的动态数据信息表
PlayerDataModel.PlayerData = {}
ModelTool:SetMeta(PlayerDataModel.PlayerData)
-- 玩家的动态数据信息表（合并后 完整的）
PlayerDataModel.CompletePlayerData = {}
ModelTool:SetMeta(PlayerDataModel.CompletePlayerData)

-- 动态数据初始化
function PlayerDataModel:Init()
    --if not CS.System.IO.File.Exists(self.FilePath) then
    -- 测试用：每次都初始化
    if false then
        return
    end
    -- 读取 玩家初始数据的策划静态表(json)
    local ta = ABManager:LoadAsset("json", "PlayerInit")
    -- 写入
    self:WriteIn(ta.text)
end

-- 读取 可读写路径中的数据
function PlayerDataModel:ReadOut()
    -- 从可读写路径中读取信息
    local str = CS.System.IO.File.ReadAllText(self.FilePath)
    self.PlayerData = JsonUtil.decode(str)

    -- 合并出完整信息
    self.CompletePlayerData = StaticDataModel:MergeData(self.PlayerData)

    return self.CompletePlayerData
end

-- 写入 可读写路径,提供table或文本或默认写入玩家数据
function PlayerDataModel:WriteIn(data)
    if type(data) == "string" then
        CS.System.IO.File.WriteAllText(self.FilePath, data)
    elseif type(data) == "table" then
        CS.System.IO.File.WriteAllText(self.FilePath, JsonUtil.encode(data))
    else
        CS.System.IO.File.WriteAllText(self.FilePath, JsonUtil.encode(self.PlayerData))
    end
end

function PlayerDataModel:RemoveItem(itemData)
    -- 遍历玩家目前的所有道具
    for k, v in pairs(self.PlayerData.Items) do
        if itemData.ItemID == v.ItemID then
            -- 扣除玩家表里相应的道具
            v.Count = tostring(tonumber(v.Count) - tonumber(itemData.Count))
            print(v.ItemID .. " 剩余数量：" .. v.Count)
            -- 如果道具数量为0，则去除此道具
            if v.Count == "0" then
                PlayerDataModel.PlayerData[k] = nil
            end
            break
        end
    end
    for k, v in pairs(self.CompletePlayerData.Items) do
        if itemData.ItemID == v.ItemID then
            v.Count = tostring(tonumber(v.Count) - tonumber(itemData.Count))
            print(v.ItemID .. " 剩余数量：" .. v.Count)
            if v.Count == "0" then
                PlayerDataModel.CompletePlayerData[k] = nil
            end
            break
        end
    end
end

function PlayerDataModel:AddItem(itemID, count)
    local newItem = {}
    newItem.ItemID = itemID
    newItem.Count = tostring(count)
    -- 增加到玩家动态表
    table.insert(self.PlayerData.Items, newItem)

    -- 合并出完整道具信息
    local completeItem = StaticDataModel:MergeItem(newItem)
    -- 增加到完整的玩家动态表
    table.insert(self.CompletePlayerData.Items, completeItem)

    -- -- 测试打印
    -- ModelTool:SetMeta(completeItem)
    -- print(completeItem)
end

function PlayerDataModel:LotteryProp(type)
end
