MakerCtrl = {}

-- -- 预制体上的UISubObject脚本，内含所有UI对象
-- MakerCtrl.Panel = nil
-- MakerCtrl.RoleWindow = nil
-- -- 右侧道具列表
-- MakerCtrl.RightContent = nil

-- -- 记录筛选条件
-- MakerCtrl.Tag = Tag1
-- -- 记录排序条件
-- MakerCtrl.SortWay = SortWay1
-- MakerCtrl.ChangeWay = 1

-- -- 当前显示的所有道具
-- MakerCtrl.ItemsNow = nil
-- -- 当前选中的道具
-- MakerCtrl.ItemChoice = nil
-- -- 当前选择的英雄
-- MakerCtrl.HeroChoice = nil
-- -- 临时选择的英雄
-- MakerCtrl._heroChoiceTem = nil

local Tag1 = "Food"
local Tag2 = "Item"
local Tag3 = "Equipment"

local SortWay1 = "Level"
local SortWay2 = "Price"


function MakerCtrl:Init()
    print("进入制品手造")

    -- 预制体上的UISubObject脚本，内含所有UI对象
    MakerCtrl.Panel = nil
    MakerCtrl.RoleWindow = nil

    MakerCtrl.RightContent = nil
    -- 记录筛选条件
    MakerCtrl.Tag = Tag1
    -- 记录排序条件
    MakerCtrl.SortWay = SortWay1
    MakerCtrl.ChangeWay = 1

    -- 当前显示的所有道具
    MakerCtrl.ItemsNow = nil
    -- 当前选中的道具
    MakerCtrl.ItemChoice = nil
    -- 当前选择的英雄
    MakerCtrl.HeroChoice = nil
    -- 临时选择的英雄
    MakerCtrl._heroChoiceTem = nil

    self.Panel = LoadManager:Load(ABManager:LoadAsset("prefab", "FabricateUI"), "UI", true):GetComponent("UISubObject")
    if (self.Panel == nil) then
        print("self.Panel == nil")
    end
    self.RightContent = CS.UnityEngine.GameObject.Find("Fabricate_Right/BG_List/FabricateList_Scroll/Viewport/Content")
    self:ShowItems()

    -- 返回按钮
    self.Panel.buttons[0].onClick:AddListener(
        function()

            UICtrl:Back2MainScene()
        end
    )
    -- 选择英雄按钮
    self.Panel.buttons[1].onClick:AddListener(
        function()
            self:ShowHerosWindow()
        end
    )
    -- 合成按钮
    self.Panel.buttons[2].onClick:AddListener(
        function()
            self:SynItem(self.ItemChoice)
        end
    )
    self.Panel.buttons[2].interactable = false

    -- 筛选1：食物
    self.Panel.toggles[0].onValueChanged:AddListener(
        function(isTrue)
            if isTrue == true then
                self.Tag = Tag1
                self.ItemChoice = nil
            end
            self:ShowItems()
        end
    )
    -- 筛选2：道具
    self.Panel.toggles[1].onValueChanged:AddListener(
        function(isTrue)
            if isTrue == true then
                self.Tag = Tag2
                self.ItemChoice = nil
            end
            self:ShowItems()
        end
    )
    -- 筛选3：武器
    self.Panel.toggles[2].onValueChanged:AddListener(
        function(isTrue)
            if isTrue == true then
                self.Tag = Tag3
                self.ItemChoice = nil
            end
            self:ShowItems()
        end
    )

    -- 排序1：等级
    self.Panel.toggles[3].onValueChanged:AddListener(
        function(isTrue)
            if isTrue == true then
                self.ChangeWay = self.ChangeWay * (-1)
            else
                self.SortWay = SortWay1
                self.ChangeWay = 1
            end
            self:ShowItems()
        end
    )
    -- 排序2：价格
    self.Panel.toggles[4].onValueChanged:AddListener(
        function(isTrue)
            if isTrue == true then
                self.ChangeWay = self.ChangeWay * (-1)
            else
                self.SortWay = SortWay2
                self.ChangeWay = 1
            end
            self:ShowItems()
        end
    )
end



-- 显示每一个英雄的框
function MakerCtrl:ShowHeroCells(_herosList)
    -- print("_herosList:" .. #_herosList)

    for k, v in pairs(_herosList) do

        -- print(_herosList[k].InsBuff)
        -- 分割字符串得到增益种类和加成
        local _buff = ModelTool:SplitStr(_herosList[k].InsBuff)

        -- 加载英雄Toggle的gameObject
        local _hero = LoadManager:Load(ABManager:LoadAsset("prefab", "Toggle_Role"), self.RoleWindow.go[0].transform, true)
        local _heroTog = _hero:GetComponent("Toggle")
        _heroTog.group = self.RoleWindow.go[0]:GetComponent("ToggleGroup")

        -- 添加英雄Toggle的点击事件
        _heroTog.onValueChanged:AddListener(
            function(isTrue)
                if isTrue == true then
                    self.RoleWindow.go[0]:GetComponent("ToggleGroup").allowSwitchOff = false
                    _heroTog:Select()
                    self._heroChoiceTem = v
                    print("切换英雄成功：" .. self._heroChoiceTem.HeroID)
                else
                    self.RoleWindow.go[0]:GetComponent("ToggleGroup").allowSwitchOff = true
                    _heroTog:OnDeselect()
                    self._heroChoiceTem = nil
                    print("取消英雄选择")
                end
            end
        )

        -- 显示英雄头像
        _hero.transform:Find("AV"):GetComponent("Image").sprite = ABManager:LoadAsset("texture", "female" , CS.UnityEngine.Sprite)
        -- 显示增益信息
        local _buffInfo = "增益類型:"
        if _buff[1] == "2" then
            _buffInfo = _buffInfo .. "食物"
        elseif _buff[1] == "3" then
            _buffInfo = _buffInfo .. "道具"
        else
            _buffInfo = _buffInfo .. "裝備"
        end
        _hero.transform:Find("Text (TMP)"):GetComponent("TextMeshProUGUI").text = _buffInfo .. "\n" .. _buff[2]

        -- 显示当前选中的英雄
        if self.HeroChoice ~=nil then
            self._heroChoiceTem = self.HeroChoice
            if v.HeroID == self._heroChoiceTem.HeroID then
                _heroTog.isOn = true
                _heroTog:Select()
            end
        end
        
    end
end

-- 显示选择的英雄的头像
function MakerCtrl:ShowHeroChoice()
    -- self.Panel.images[0].sprite = ABManager:LoadAsset("texture", "self.HeroChoice.TexturePath" , CS.UnityEngine.Sprite)
    self.Panel.images[0].sprite = ABManager:LoadAsset("texture", "female" , CS.UnityEngine.Sprite)
end

-- 显示英雄选择界面
function MakerCtrl:ShowHerosWindow()
    self._heroChoiceTem = self.HeroChoice
    -- 加载界面
    self.RoleWindow = LoadManager:Load(ABManager:LoadAsset("prefab", "FabricateUI_Role"), "FabricateUI", true):GetComponent("UISubObject")
    -- 删除所有子物体
    LoadManager:DeleteAllChilds(self.RoleWindow.go[0])
    -- 确认按钮
    self.RoleWindow.buttons[0].transform:Find("Text (TMP)"):GetComponent("TextMeshProUGUI").text = "確認"
    self.RoleWindow.buttons[0].onClick:AddListener(
        function()
            self.HeroChoice = self._heroChoiceTem
            self._heroChoiceTem = nil
            CS.UnityEngine.Object.Destroy(self.RoleWindow.gameObject)
            self:ShowHeroChoice()
            if self.HeroChoice ~= nil then
                print("选择英雄成功，当前所选择的英雄：" .. self.HeroChoice.HeroID)
            else
                print("当前未选择英雄。")
                self.Panel.images[0].sprite = nil
            end
        end
    )
    -- 返回按钮
    self.RoleWindow.buttons[1].transform:Find("Text (TMP)"):GetComponent("TextMeshProUGUI").text = "返回"
    self.RoleWindow.buttons[1].onClick:AddListener(
        function()
            CS.UnityEngine.Object.Destroy(self.RoleWindow.gameObject)
        end
    )

    -- 对英雄列表进行排序
    local _herosList = {}
    if self.Tag == Tag1 then
        _herosList = StaticDataModel:SortHeroByInsBuff(PlayerDataModel.CompletePlayerData.Heros, "2")
    elseif self.Tag == Tag2 then
        _herosList = StaticDataModel:SortHeroByInsBuff(PlayerDataModel.CompletePlayerData.Heros, "3")
    elseif self.Tag == Tag3 then
        _herosList = StaticDataModel:SortHeroByInsBuff(PlayerDataModel.CompletePlayerData.Heros, "4", "5", "6", "7", "8", "9")
    end


    self:ShowHeroCells(_herosList)
end


-- 判断此道具目前是否可合成
-- 参数1(string)：需要进行判断的合成物ID
local function CheckCouldSyn(synItemID)
    -- 最终结果
    local result = false

    -- 遍历静态策划表，获取此装备合成所需的道具列表
    local _needsList = nil
    for _, v in pairs(StaticDataModel.ItemsTable) do
        if v.ItemID == synItemID then
            _needsList = ModelTool:SplitStr(v.SynNeeds)
            break
        end
    end

    if _needsList == nil then
        print("_needsList为空，未得到合成此道具所需的物品")
        return
    end

    -- 匹配数 满足一个条件+1
    local rightCount = 0
    -- 遍历所需物品(由于SynNeeds的格式为ID,C,ID,C,ID,C，所以需要除以2)
    for i = 1, #(_needsList) / 2, 1 do
        -- 遍历玩家目前的所有道具
        for k, v in pairs(PlayerDataModel.PlayerData.Items) do
            -- 如果ID匹配，且数量满足
            if v.ItemID == _needsList[2 * i - 1] and tonumber(v.Count) >= tonumber(_needsList[2 * i]) then
                -- 匹配数+1
                rightCount = rightCount + 1
            end
        end
    end

    -- print("rightCount:" .. rightCount)
    -- 匹配数满足，则true
    if rightCount == #(_needsList) / 2 then
        result = true
    end

    return result
end


--[[
    @desc: 检查所有道具，修改它的属性（是否可以合成）
    author:{author}
    time:2019-08-07 20:56:57
    --@items: 筛选过后 当前所有所需显示的道具表
]]
function MakerCtrl:CheckAllSyn(items)
    for k, v in pairs(items) do
        items[k].CouldSyn = tostring(CheckCouldSyn(v.ItemID))
    end
end

--[[
    @desc: 依序显示当前条件下的所有道具
    author:{author}
    time:2019-08-12 14:31:11
]]
function MakerCtrl:ShowItems()
    -- 删除所有子物体
    LoadManager:DeleteAllChilds(self.RightContent)
    self.ItemsNow = {}

    -- 筛选符合条件的道具
    local items = {}
    local _ = nil
    if self.Tag == Tag1 then
        items,_ = StaticDataModel:ScreenList(StaticDataModel.ItemsTable, "Type", 1, "2")
    elseif self.Tag == Tag2 then
        items,_ = StaticDataModel:ScreenList(StaticDataModel.ItemsTable, "Type", 1, "3")
    elseif self.Tag == Tag3 then
        items,_ = StaticDataModel:ScreenList(StaticDataModel.ItemsTable, "Type", 1, "4","5","6","7","8","9")
    end
    _ = nil

    -- 判断是否可合成
    self:CheckAllSyn(items)

    -- 对道具列表进行排序
    StaticDataModel:SortItem(items, "CouldSyn", "true", self.SortWay, self.ChangeWay)

    -- 已经排好序的道具列表
    --ModelTool:SetMeta(items)
    --print(items)

    -- 生成Cell
    for k, v in pairs(items) do
        -- 加载并实例化
        local go = ABManager:LoadAsset("prefab", "Button")
        self.ItemsNow[k] = {}
        self.ItemsNow[k].obj = LoadManager:Load(go, self.RightContent.transform, true)
        self.ItemsNow[k].data = ModelTool:CopyTable(v)
        -- 添加事件
        self.ItemsNow[k].obj:GetComponent("Button").onClick:AddListener(
            function()
                self.ItemChoice = self.ItemsNow[k].data
                ModelTool:SetMeta(self.ItemChoice)
                -- 打印数据
                print(self.ItemChoice)
                self:ShowSynNeeds()
                if v.CouldSyn == "true" then
                    self.Panel.buttons[2].interactable = true
                else
                    self.Panel.buttons[2].interactable = false
                end
            end
        )
        -- 显示图片
        self.ItemsNow[k].obj:GetComponent("Image").sprite = ABManager:LoadAsset("texture", items[k].TexturePath , CS.UnityEngine.Sprite)
        -- 不可合成的物品的图片透明显示
        if items[k].CouldSyn == "false" then
            self.ItemsNow[k].obj:GetComponent("Image").color = CS.UnityEngine.Color(1,1,1,0.5)
        end
        -- 不用显示数据
        self.ItemsNow[k].obj.transform:Find("Text"):GetComponent("Text").text = ""
    end

    -- 显示合成所需 nil
    self:ShowSynNeeds()
end


--[[
    @desc: 选中某道具时，在界面左侧显示其合成所需
    author:{author}
    time:2019-08-12 14:31:28
    @return:
]]
function MakerCtrl:ShowSynNeeds()
    -- print("ShowSynNeeds is running")
    local _needsList = {}

    if self.ItemChoice == nil then
        for i = 1, 3, 1 do
            self.Panel.texts[i].text = ""
            self.Panel.images[i].sprite = nil -- ABManager:LoadAsset("texture", "空白图" , CS.UnityEngine.Sprite)
            self.Panel.images[i].color = CS.UnityEngine.Color(1,1,1,0)
        end
        self.Panel.buttons[2].interactable = false
        return
    end

    self.ItemChoice.CouldSyn =  CheckCouldSyn(self.ItemChoice)

    -- 获取合成所需(id,count,id,count,...)
    _needsList = ModelTool:SplitStr(self.ItemChoice.SynNeeds)
    print(self.ItemChoice.SynNeeds)

    for i = 1, 3, 1 do
        -- 如果需要道具
        if 2*i <= #_needsList then
            -- print("_needsList:" .. _needsList[2 * i - 1] .. "," .. _needsList[2 * i])
            -- 遍历玩家目前的所有道具
            for k, v in pairs(PlayerDataModel.CompletePlayerData.Items) do
                -- 如果ID匹配
                if v.ItemID == _needsList[2 * i - 1] then
                    -- 显示数量
                    self.Panel.texts[i].text = _needsList[2 * i] .. "/" .. v.Count
                    -- 显示图片
                    self.Panel.images[i].sprite = ABManager:LoadAsset("texture", v.TexturePath , CS.UnityEngine.Sprite)
                    -- 根据数量足够与否显示图片透明度
                    if tonumber(v.Count) >= tonumber(_needsList[2 * i]) then
                        self.Panel.images[i].color = CS.UnityEngine.Color(1,1,1,1)
                    else
                        self.Panel.images[i].color = CS.UnityEngine.Color(1,1,1,0.5)
                    end
                    break
                -- 如果ID匹配不到
                elseif k == #(PlayerDataModel.CompletePlayerData.Items) then
                    self.Panel.texts[i].text = _needsList[2 * i] .. "/0"
                    self.Panel.images[i].sprite = nil
                    self.Panel.images[i].color = CS.UnityEngine.Color(1,1,1,0.5)
                end
            end
        -- 如果不需要道具
        else
            -- print("3：_needsList is nil")
            self.Panel.texts[i].text = ""
            self.Panel.images[i].sprite = nil
            self.Panel.images[i].color = CS.UnityEngine.Color(1,1,1,0)
        end
    end

    
    if self.ItemChoice ~=nil and self.ItemChoice.CouldSyn == "true" then
        print("self.ItemChoice ~=nil and self.ItemChoice.CouldSyn == 'true'")
        self.Panel.buttons[2].interactable = true
    else
        self.Panel.buttons[2].interactable = false
    end

end


--[[
    @desc: 合成新的道具，扣除相应所需道具
    author:{author}
    time:2019-08-07 20:01:37
]]
function MakerCtrl:SynItem(item)
    
    local _needsList = ModelTool:SplitStr(item.SynNeeds)

    -- 遍历所需物品(由于SynNeeds的格式为ID,C,ID,C,ID,C，所以需要除以2)
    for i = 1, #(_needsList) / 2, 1 do
        -- 扣除所需物品
        PlayerDataModel:RemoveItem(_needsList[2*i-1] , _needsList[2*i])
    end

    -- 添加合成的道具
    PlayerDataModel:AddItem(item.ItemID , 1)

    -- 刷新界面
    self:ShowItems()
    
end


