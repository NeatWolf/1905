GameStartManager = {}

-- 加载启动图
function GameStartManager:LoadImage()
    local image = LoadManager:Load(ABManager:LoadAsset("prefab", "OpenGame"), "UI", true)
    CutToCtrl:BlackMaskAni(
        0,
        0.5,
        function()
            Core.timer = 2 -- 2秒后调用黑遮罩淡入
            Core.timerEvent = function()
                CutToCtrl:CutTo(
                    0.5,
                    function()
                        CS.UnityEngine.Object.Destroy(image.gameObject)
                        GameStartManager:Login()
                        CutToCtrl:BlackMaskAni(0, 0.5)
                    end
                )
            end
        end
    )
end

-- 加载登录系统
function GameStartManager:Login()
    local subObj = LoadManager:Load(ABManager:LoadAsset("prefab", "LoginTest"), "UI", true):GetComponent("UISubObject")
    subObj.buttons[0].onClick:AddListener(
        function()
            -- 黑遮罩淡入出，登陆成功
            CutToCtrl:CutTo(
                0.5,
                function()
                    CS.UnityEngine.Object.Destroy(subObj.gameObject)
                    self.LoadingBar()
                end
            )
        end
    )
end

-- 登录成功，加载进度条，加载所有数据
function GameStartManager:LoadingBar()
    -- 加载 进度条
    LoadingPanel = LoadManager:Load(ABManager:LoadAsset("prefab", "LoadingProcess"), "UI", true)
    barImage = LoadingPanel.transform:Find("Bar").gameObject:GetComponent("Image")
    Core.countDown = 2
    local time = Core.countDown
    Core.cdEvent = function()
        barImage.fillAmount = 1 - Core.countDown / time
        if barImage.fillAmount == 1 then
            -- 加载完成，屏幕黑
            CutToCtrl:CutTo(
                0.5,
                function()
                    CutToCtrl:BlackMaskAni(0, 0.25)
                    -- 进入游戏主场景，销毁不需要的UI，屏幕白
                    CS.UnityEngine.Object.Destroy(LoadingPanel.gameObject)
                    MainSceneCtrl:Init()
                end
            )
        end
    end

    StaticDataModel:ReadOut()
    -- 加载 玩家的本地数据，并合并成完整数据
    PlayerDataModel:ReadOut()

    -- -- 测试排序
    -- ModelTool:SetMeta(PlayerDataModel.CompletePlayerData.Items)
    -- print(PlayerDataModel.CompletePlayerData.Items)
    -- StaticDataModel:SortItems(PlayerDataModel.CompletePlayerData.Items, "Level", 1)
    -- print(PlayerDataModel.CompletePlayerData.Items)

    -- -- 测试筛选+是否可以合成
    -- local newList = StaticDataModel:ScreenItem(StaticDataModel.ItemsTable, "Type", "2")
    -- StaticDataModel:CheckAllSyn(newList)
    -- ModelTool:SetMeta(newList)
    -- print(newList)



    -- require("/../AssetBundle/Script/Role/RoleCtrl.lua.txt")

    -- -- 测试为英雄穿上装备
    -- local heroInfo = ModelTool:CopyTable(PlayerDataModel.CompletePlayerData.Heros[2])
    -- ModelTool:SetMeta(heroInfo)
    -- print(heroInfo)
    -- heroInfo = RoleCtrl:EquipHero(heroInfo,StaticDataModel.ItemsTable[160],1)
    -- heroInfo = RoleCtrl:EquipHero(heroInfo,StaticDataModel.ItemsTable[155],1)
    -- ModelTool:SetMeta(PlayerDataModel.PlayerData.Heros[2])
    -- print(PlayerDataModel.PlayerData.Heros[2])
    -- ModelTool:SetMeta(PlayerDataModel.CompletePlayerData.Heros[2])
    -- print(PlayerDataModel.CompletePlayerData.Heros[2])
    -- ModelTool:SetMeta(heroInfo)
    -- print(heroInfo)
    -- heroInfo.Equips = nil
    -- print(heroInfo)
    -- print(PlayerDataModel.CompletePlayerData.Heros[2])

    -- -- 测试投喂英雄
    -- local heroInfo = ModelTool:CopyTable(PlayerDataModel.CompletePlayerData.Heros[2])
    -- ModelTool:SetMeta(heroInfo)
    -- print(heroInfo)

    -- heroInfo = RoleCtrl:FeedHero(heroInfo, StaticDataModel.ItemsTable[40])
    -- ModelTool:SetMeta(PlayerDataModel.PlayerData.Heros[2])
    -- print(PlayerDataModel.PlayerData.Heros[2])
    -- ModelTool:SetMeta(PlayerDataModel.CompletePlayerData.Heros[2])
    -- print(PlayerDataModel.CompletePlayerData.Heros[2])
    -- ModelTool:SetMeta(heroInfo)
    -- print(heroInfo)
    -- heroInfo.ColBuffTem = nil
    -- print(heroInfo)
    -- print(PlayerDataModel.CompletePlayerData.Heros[2])



    -- StaticDataModel:CheckAllSyn(newList)

    -- ModelTool:SetMeta(newList)
    -- print(newList)

    -- 读取主场景脚本，清除GameStartManager占用
    require("/../AssetBundle/Script/MainScene/MainSceneCtrl.lua.txt")
    GameStartManager = nil
end

GameStartManager:LoadImage()
