RoleCtrl = {}

-- 预制体上的UISubObject脚本，内含所有UI对象
RoleCtrl.Panel = nil
RoleCtrl.LevelWindow = nil
-- 当前选择的角色在子物体中的Index
-- RoleCtrl.currentIndex = -1
-- 当前选择的角色数据
RoleCtrl.CurrentHero = nil

RoleCtrl.RoleSelectAniCSharp = nil

function RoleCtrl:Init()
    print("进入角色管理")
    self.Panel = LoadManager:Load(ABManager:LoadAsset("prefab", "RoleManUI"), "UI", true):GetComponent("UISubObject")
    -- self.LevelWindow = self.Panel.go[3]:GetComponent("UISubObject")

    -- 添加委托
    -- 返回按钮
    self.Panel.buttons[0].onClick:AddListener(
        function()
            self:Back2MainScene()
        end
    )
    -- 升级按钮
    self.Panel.buttons[1].onClick:AddListener(
        function()
            self.Panel.go[3]:SetActive(true)
            local _needScroll = self:GetScrollNeed(self.CurrentHero)
            LevelView:ShowLevelWindow(self.CurrentHero , _needScroll)
        end
    )
    -- 详情按钮
    self.Panel.buttons[2].onClick:AddListener(
        function()
            self.Panel.go[4]:SetActive(true)
            self:ShowDetailWindow(self.CurrentHero)
        end
    )

    LoadManager:LoadLua("Role", "RoleView")
    LoadManager:LoadLua("Role", "LevelView")
    LevelView:Init()
    LoadManager:LoadLua("Role", "DetailView")
    DetailView:Init()

    -- 按ID排序 可在每次抽卡后就进行排序
    StaticDataModel:SortHeroByHeroID(PlayerDataModel.CompletePlayerData.Heros)

    -- 调取View 加载显示英雄列表
    RoleView:ShowHerosList(PlayerDataModel.CompletePlayerData.Heros)

    -- 英雄列表的Content上的动画CSharp脚本
    self.RoleSelectAniCSharp = self.Panel.go[2]:GetComponent("RolePanelSelectAnimation")
    self.RoleSelectAniCSharp:Init()
    self.RoleSelectAniCSharp.changeRoleEvent = function() self:ChangeCurrentRole() end

    -- 切换当前英雄为列表第一个
    self:ChangeCurrentRole()



    --[[
    -- 测试为英雄穿上装备
    local heroInfo = ModelTool:CopyTable(PlayerDataModel.CompletePlayerData.Heros[2])
    ModelTool:SetMeta(heroInfo)
    print(heroInfo)
    heroInfo = RoleCtrl:EquipHero(heroInfo,StaticDataModel.ItemsTable[160],1)
    heroInfo = RoleCtrl:EquipHero(heroInfo,StaticDataModel.ItemsTable[155],1)
    ModelTool:SetMeta(PlayerDataModel.PlayerData.Heros[2])
    print(PlayerDataModel.PlayerData.Heros[2])
    ModelTool:SetMeta(PlayerDataModel.CompletePlayerData.Heros[2])
    print(PlayerDataModel.CompletePlayerData.Heros[2])
    ModelTool:SetMeta(heroInfo)
    print(heroInfo)
    heroInfo.Equips = nil
    print(heroInfo)
    print(PlayerDataModel.CompletePlayerData.Heros[2])

    -- 测试投喂英雄
    local heroInfo = ModelTool:CopyTable(PlayerDataModel.CompletePlayerData.Heros[2])
    ModelTool:SetMeta(heroInfo)
    print(heroInfo)
    heroInfo = RoleCtrl:FeedHero(heroInfo, StaticDataModel.ItemsTable[40])
    ModelTool:SetMeta(PlayerDataModel.PlayerData.Heros[2])
    print(PlayerDataModel.PlayerData.Heros[2])
    ModelTool:SetMeta(PlayerDataModel.CompletePlayerData.Heros[2])
    print(PlayerDataModel.CompletePlayerData.Heros[2])
    ModelTool:SetMeta(heroInfo)
    print(heroInfo)
    heroInfo.ColBuffAdd = nil
    print(heroInfo)
    print(PlayerDataModel.CompletePlayerData.Heros[2])
    --]]
end


-- 切换英雄
function RoleCtrl:ChangeCurrentRole()
    self.CurrentHero = ModelTool:CopyTable( PlayerDataModel.CompletePlayerData.Heros[self.RoleSelectAniCSharp.currentRoleID + 1] )
    -- print("当前角色改变为：" .. self.CurrentHero.Name)
    RoleView:ShowHeroInfo(self.CurrentHero)
end


-- 获取所需的卷轴信息
function RoleCtrl:GetScrollNeed(heroData)
    local _needScroll = {}
    -- 获取卷轴列表
    local ScrollsList = StaticDataModel:ScreenList(StaticDataModel.ItemsTable, "Type", 1, "0")

    -- 获取信息
    for k,v in pairs(ScrollsList) do
        if v.Level == heroData.Level then
            _needScroll.ItemID = v.ItemID
            _needScroll.Name = v.Name
            break
        end
    end
    -- 获取数量
    if heroData.Level == "1" then
        _needScroll.Count = 5
    elseif heroData.Level == "2" then
        _needScroll.Count = 3
    else
        _needScroll.Count = 1
    end
    -- 返回卷轴信息
    return _needScroll
end


--[[
    @desc: 英雄升级
    author:{author}
    time:2019-08-14 19:54:45
    --@heroData: 英雄原信息
]]
function RoleCtrl:LevelUp(heroData , scrollData)

    -- 扣除所需的卷轴
    PlayerDataModel:RemoveItem(scrollData.ItemID , scrollData.Count)
    print( "ID: " .. scrollData.ItemID .. ",count: " .. scrollData.Count)

    -- 英雄升级
    heroData.Level = tostring(tonumber(heroData.Level) + 1)     -- 现等级
    local _buffAdd = ModelTool:SplitStr(heroData.LevelUp)       -- 获取升级的增比
    heroData.EnergyMax = tostring(tonumber(heroData.EnergyMax) + tonumber(_buffAdd[1]))     -- 现总耐力

    local _heroColBuff = ModelTool:SplitStr(heroData.ColBuff)   -- 原收集增益
    local _heroInsBuff = ModelTool:SplitStr(heroData.InsBuff)   -- 原设施增益
    local _colBuff1New = tostring(tonumber(_heroColBuff[1]) * tonumber(_buffAdd[2]))        -- 现采集数量系数
    local _colBuff2New = tostring(tonumber(_heroColBuff[2]) * tonumber(_buffAdd[3]))        -- 现采集爆率系数
    local _colBuff3New = tostring(tonumber(_heroColBuff[3]) * tonumber(_buffAdd[4]))        -- 现采集时间倍率
    local _insBuffNew = tostring(tonumber(_heroInsBuff[2]) * tonumber(_buffAdd[5]))         -- 现合成速度倍率
    heroData.ColBuff = _colBuff1New .. "," .. _colBuff2New .. "," .. _colBuff3New
    heroData.InsBuff = _heroInsBuff[1] .. "," .. _insBuffNew

    -- 得到新的卷轴信息
    scrollData = self:GetScrollNeed(heroData)
    -- 刷新升级窗口的显示
    LevelView:ShowLevelWindow(heroData , scrollData)

    -- 测试打印
    -- print("升级后： Level:" .. heroData.Level .. " ,EnergyMax:" .. heroData.EnergyMax .. " ,ColBuff:" .. heroData.ColBuff .. " ,InsBuff:" .. heroData.InsBuff)

    -- 修改玩家动态表
    for k,v in pairs(PlayerDataModel.PlayerData.Heros) do
        if v.HeroID == heroData.HeroID then
            v.Level = heroData.Level
            v.EnergyMax = heroData.EnergyMax
            v.ColBuff = heroData.ColBuff
            v.InsBuff = heroData.InsBuff
            -- 测试打印
            -- ModelTool:SetMeta(v)
            -- print(v)
            break
        end
    end
    for k,v in pairs(PlayerDataModel.CompletePlayerData.Heros) do
        if v.HeroID == heroData.HeroID then
            v.Level = heroData.Level
            v.EnergyMax = heroData.EnergyMax
            v.ColBuff = heroData.ColBuff
            v.InsBuff = heroData.InsBuff
            -- 测试打印
            -- ModelTool:SetMeta(v)
            -- print(v)
            break
        end
    end
end


function RoleCtrl:SortEquips(equips)
    local resList = {}
    -- 筛选不同种类的装备
    local _list = {}
    local _listTemp = {}
    _list[9],_listTemp = StaticDataModel:ScreenList(equips, "Type", 1, "9")
    _list[4],_listTemp = StaticDataModel:ScreenList(_listTemp, "Type", 1, "4")
    _list[5],_listTemp = StaticDataModel:ScreenList(_listTemp, "Type", 1, "5")
    _list[6],_listTemp = StaticDataModel:ScreenList(_listTemp, "Type", 1, "6")
    _list[7],_listTemp = StaticDataModel:ScreenList(_listTemp, "Type", 1, "7")
    _list[8],_listTemp = StaticDataModel:ScreenList(_listTemp, "Type", 1, "8")
    -- 将所有列表进行排序
    for i=4,9 do
        if _list[i] ~= nil then
            StaticDataModel:SortItem(_list[i], "Type", tostring(i), "Level", 1)
        end
    end
    -- 最终完整的列表
    if _list[9] ~= nil then
        for k,v in pairs(_list[9]) do
            table.insert(resList, v)
        end
    end
    for i=4,8 do
        if _list[i] ~= nil then
            for k,v in pairs(_list[i]) do
                table.insert(resList, v)
            end
        end
    end

    ModelTool:SetMeta(resList)
    print(resList)

    return resList
end

function RoleCtrl:GetEquips(heroData)
    local equipList = {}
    for k,v in pairs(heroData.Equips) do
        if v.Type == "9" then
            equipList[1] = v
        elseif v.Type == "4" then
            equipList[2] = v
        elseif v.Type == "5" then
            equipList[3] = v
        elseif v.Type == "6" then
            equipList[4] = v
        elseif v.Type == "7" then
            equipList[5] = v
        elseif v.Type == "8" then
            equipList[6] = v
        end
    end
    if equipList == {} then
        return nil
    else
        return equipList
    end
end

function RoleCtrl:GetNotEquips(heroData)
    local Eqiupments = self:SortEquips(PlayerDataModel.CompletePlayerData.Items)
    -- 遍历玩家的每一个英雄
    for k1,v1 in pairs(PlayerDataModel.CompletePlayerData.Heros) do
        -- 遍历英雄的每一个装备
        for k2,v2 in pairs(v1.Equips) do
            --遍历玩家的道具
            for k3,v3 in pairs(Eqiupments) do
                if v2.ItemID == v3.ItemID then
                    v3.Count = tostring(tonumber(v3.Count) - 1)
                    if v3.Count == "0" then
                        Eqiupments[k3] = nil
                    end
                    break
                end
            end
        end
    end
    return Eqiupments
end


--[[
    @desc: 对英雄进行装备操作
    author:{author}
    time:2019-08-08 13:38:10
    --@heroData: 英雄信息
	--@itemData: 装备信息
	--@equipWay: 1/-1 穿上/脱下
    @return: 更改后的新的英雄信息
]]
function RoleCtrl:EquipHero(heroData, itemData, equipWay)

    -- 得到穿上的装备信息和脱下的装备信息
    local putOn = nil
    local getOff = nil

    if equipWay == 1 then
        local _,equip = StaticDataModel:Exist(heroData.Equips, "Type", itemData.Type)
        if equip ~= nil then
            getOff = {}
            getOff = equip
        end
        putOn = itemData
    elseif equipWay == -1 then
        getOff = itemData
    else
        print("equipWay传入有误")
        return heroData
    end

    -- 处理英雄Buff
    local _hBuff = ModelTool:SplitStr(heroData.ColBuff)
    local _hEnergy = heroData.EnergyMax
    if getOff ~= nil then
        print("getOff.HeroBuff: " .. getOff.HeroBuff)
        local _iBuff = ModelTool:SplitStr(getOff.HeroBuff)
        _hBuff[1] = tostring(tonumber(_hBuff[1]) - tonumber(_iBuff[3]))
        _hBuff[2] = tostring(tonumber(_hBuff[2]) - tonumber(_iBuff[4]))
        _hEnergy = tostring(tonumber(_hEnergy) - tonumber(_iBuff[1]))
    end
    if putOn ~= nil then
        print("putOn.HeroBuff: " .. putOn.HeroBuff)
        local _iBuff = ModelTool:SplitStr(putOn.HeroBuff)
        _hBuff[1] = tostring(tonumber(_hBuff[1]) + tonumber(_iBuff[3]))
        _hBuff[2] = tostring(tonumber(_hBuff[2]) + tonumber(_iBuff[4]))
        _hEnergy = tostring(tonumber(_hEnergy) + tonumber(_iBuff[1]))
    end

    -- 刷新 玩家动态数据 相应的英雄信息
    for k, v in pairs(PlayerDataModel.PlayerData.Heros) do
        -- 找到相应英雄
        if v.HeroID == heroData.HeroID then
            -- 1.对装备表的操作
            if getOff ~= nil then
                v.Equips = ModelTool:RemoveStr(v.Equips, getOff.ItemID)
            end
            if putOn ~= nil then
                v.Equips = ModelTool:MergeStr(v.Equips, putOn.ItemID)
            end
            -- 2.赋值给英雄
            v.ColBuff = ModelTool:MergeStr(_hBuff[1] , _hBuff[2] , _hBuff[3])
            v.EnergyMax = _hEnergy
            break
        end
    end
    -- 刷新 玩家动态数据 相应的道具信息
    for k,v in pairs(PlayerDataModel.PlayerData.Items) do
        if getOff ~= nil then
            if v.ItemID == getOff.ItemID then
                v.EquipHeros = ModelTool:RemoveStr(v.EquipHeros, heroData.HeroID)
            end
        end
        if putOn ~= nil then
            if v.ItemID == putOn.ItemID then
                v.EquipHeros = ModelTool:MergeStr(v.EquipHeros, heroData.HeroID)
            end
        end
    end

    for k, v in pairs(PlayerDataModel.CompletePlayerData.Heros) do
        if v.HeroID == heroData.HeroID then
            if getOff ~= nil then
                table.remove(PlayerDataModel.CompletePlayerData.Heros[k].Equips , k)
            end
            if putOn ~= nil then
                table.insert(PlayerDataModel.CompletePlayerData.Heros[k].Equips , putOn)
            end
            v.ColBuff = ModelTool:MergeStr(_hBuff[1] , _hBuff[2] , _hBuff[3])
            v.EnergyMax = _hEnergy
            
            -- 返回 刷新传入的信息
            heroData = ModelTool:CopyTable(PlayerDataModel.CompletePlayerData.Heros[k])

            break
        end
    end
    for k,v in pairs(PlayerDataModel.CompletePlayerData.Items) do
        if getOff ~= nil then
            if v.ItemID == getOff.ItemID then
                v.EquipHeros = ModelTool:RemoveStr(v.EquipHeros, heroData.HeroID)
            end
        end
        if putOn ~= nil then
            if v.ItemID == putOn.ItemID then
                v.EquipHeros = ModelTool:MergeStr(v.EquipHeros, heroData.HeroID)
            end
        end
    end
    return heroData
end

function RoleCtrl:ShowDetailWindow(heroData)
    local equipList = self:GetEquips(heroData)
    local equipments = self:GetNotEquips(heroData)
    DetailView:ShowDetail(heroData, equipList, equipments)
end

-- 投喂英雄
function RoleCtrl:FeedHero(heroData, itemData, count)
    -- 处理数据：将食物Buff附加给英雄Buff
    local _hbuffT = ModelTool:SplitStr(heroData.ColBuffAdd)
    local _ibuff = ModelTool:SplitStr(itemData.HeroBuff)
    -- 如果英雄当前的临时Buff 小于 道具的加成Buff，进行赋值
    if _hbuffT[1] < _ibuff[3] then
        _hbuffT[1] = _ibuff[3]
    end
    if _hbuffT[2] < _ibuff[4] then
        _hbuffT[2] = _ibuff[4]
    end

    -- 修改 玩家动态数据 里相应的英雄信息
    for k, v in pairs(PlayerDataModel.PlayerData.Heros) do
        -- 找到相应英雄
        if v.HeroID == heroData.HeroID then
            -- 赋值给英雄
            v.ColBuffAdd = _hbuffT[1] .. "," .. _hbuffT[2]
            v.EnergyNow = tostring(tonumber(v.EnergyNow) + _ibuff[2]*count)
            if tonumber(v.EnergyNow) > tonumber(v.EnergyMax) then
                v.EnergyNow = v.EnergyMax
            end
            break
        end
    end

    -- 修改 玩家动态数据 里相应的英雄信息
    for k, v in pairs(PlayerDataModel.CompletePlayerData.Heros) do
        -- 找到相应英雄
        if v.HeroID == heroData.HeroID then
            -- 赋值给英雄
            v.ColBuffAdd = _hbuffT[1] .. "," .. _hbuffT[2]
            v.EnergyNow = tostring(tonumber(v.EnergyNow) + _ibuff[2]*count)
            if tonumber(v.EnergyNow) > tonumber(v.EnergyMax) then
                v.EnergyNow = v.EnergyMax
            end

            heroData = ModelTool:CopyTable(PlayerDataModel.CompletePlayerData.Heros[k])
            break
        end
    end
    
    return heroData
end
