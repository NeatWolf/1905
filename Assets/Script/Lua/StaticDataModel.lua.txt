StaticDataModel = {}

-- 所有的静态策划表
StaticDataModel.ItemsTable = {}
StaticDataModel.HerosTable = {}
StaticDataModel.MonstersTable = {}
StaticDataModel.NPCsTable = {}

-- 读取 所有的静态策划表
function StaticDataModel:ReadOut()
    -- 读取道具静态表
    local ta = ABManager:LoadAsset("json", "ItemsTable")
    self.ItemsTable = JsonUtil.decode(ta.text)
    ModelTool:SetMeta(StaticDataModel.ItemsTable)

    -- 读取英雄静态表
    ta = ABManager:LoadAsset("json", "HerosTable")
    self.HerosTable = JsonUtil.decode(ta.text)
    ModelTool:SetMeta(StaticDataModel.HerosTable)

    -- 读取怪物静态表
    ta = ABManager:LoadAsset("json", "MonstersTable")
    self.MonstersTable = JsonUtil.decode(ta.text)
    ModelTool:SetMeta(StaticDataModel.MonstersTable)

    -- 读取怪物静态表
    ta = ABManager:LoadAsset("json", "NPCsTable")
    self.NPCsTable = JsonUtil.decode(ta.text)
    ModelTool:SetMeta(StaticDataModel.NPCsTable)
end

-- 合并出 完整的玩家数据信息
function StaticDataModel:MergeData(playerData)
    local finalData = {}

    finalData.User = playerData.User
    finalData.Password = playerData.Password
    finalData.Name = playerData.Name
    finalData.TexturePath = playerData.TexturePath
    finalData.StoreLevel = playerData.StoreLevel
    finalData.Money = playerData.Money
    finalData.Diamond = playerData.Diamond

    finalData.Heros = {}
    -- 合并完整的英雄信息表
    for i = 1, #playerData.Heros do
        for j = 1, #self.HerosTable do
            -- 如果ID匹配，则合并信息
            if playerData.Heros[i].HeroID == self.HerosTable[j].HeroID then
                local heroNow = {}
                -- 动态表的数据
                heroNow.HeroID = playerData.Heros[i].HeroID
                heroNow.Level = playerData.Heros[i].Level
                heroNow.EnergyMax = playerData.Heros[i].EnergyMax
                heroNow.EnergyNow = playerData.Heros[i].EnergyNow
                heroNow.ColBuff = playerData.Heros[i].ColBuff
                heroNow.InsBuff = playerData.Heros[i].InsBuff
                -- 静态表的数据
                heroNow.Name = self.HerosTable[j].Name
                heroNow.Age = self.HerosTable[j].Age
                heroNow.Gender = self.HerosTable[j].Gender
                heroNow.TexturePath = self.HerosTable[j].TexturePath
                heroNow.InsID = self.HerosTable[j].InsID
                heroNow.Speak1 = self.HerosTable[j].Speak1
                heroNow.Speak2 = self.HerosTable[j].Speak2
                heroNow.Speak3 = self.HerosTable[j].Speak3

                table.insert(finalData.Heros, heroNow)
                break
            end
        end
    end

    finalData.Items = {}
    -- 合并完整的道具信息表
    for i = 1, #playerData.Items do
        for j = 1, #self.ItemsTable do
            -- 如果ID匹配，则合并信息
            if playerData.Items[i].ItemID == self.ItemsTable[j].ItemID then
                local itemNow = {}
                -- 动态表的数据
                itemNow.ItemID = playerData.Items[i].ItemID
                itemNow.Count = playerData.Items[i].Count
                -- 静态表的数据
                itemNow.Name = self.ItemsTable[j].Name
                itemNow.Image = self.ItemsTable[j].Name
                itemNow.TexturePath = self.ItemsTable[j].TexturePath
                itemNow.Type = self.ItemsTable[j].Type
                itemNow.Level = self.ItemsTable[j].Level
                itemNow.ObMethods = self.ItemsTable[j].ObMethods
                itemNow.Prices = self.ItemsTable[j].Prices
                itemNow.HeroBuff = self.ItemsTable[j].HeroBuff
                itemNow.SuitID = self.ItemsTable[j].SuitID
                itemNow.SynNeeds = self.ItemsTable[j].SynNeeds
                itemNow.SynTime = self.ItemsTable[j].SynTime
                itemNow.Description = self.ItemsTable[j].Description

                table.insert(finalData.Items, itemNow)
                break
            end
        end
    end

    -- 返回 完整的玩家数据表
    return finalData
end

-- 参数1：传入仓库动态表
function StaticDataModel:CheckAllSyn(itemsTable)
    for k, v in itemsTable do
        v.CouldSyn = CheckCouldSyn(v.ItemID)
    end
end

-- 判断此道具目前是否可合成
-- 参数1(string)：需要进行判断的合成物ID
local function CheckCouldSyn(synItemID)
    -- 最终结果
    local result = false

    -- 遍历静态策划表，获取此装备合成所需的道具列表
    local _needsList = nil
    for _, v in pairs(self.ItemsTable) do
        if v.ItemID == synItemID then
            _needsList = ModelTool:Split(v.SynNeeds)
            break
        end
    end

    if _needsList == nil then
        print("_needsList为空，未得到合成此道具所需的物品")
        return
    end

    -- 匹配数 满足一个条件+1
    local rightCount = 0
    -- 遍历所需物品(由于SynNeeds的格式为ID,C,ID,C,ID,C，所以需要除以2)
    for i = 1, #(_needsList) / 2, 1 do
        -- 遍历玩家目前的所有道具
        for k, v in pairs(PlayerDataModel.playerData.Items) do
            -- 如果ID匹配，且数量满足
            if v.ItemID == _needsList[2 * i - 1] and v.Count >= tonumber(_needsList[2 * i]) then
                -- 匹配数+1
                rightCount = rightCount + 1
            end
        end
    end

    -- print("rightCount:" .. rightCount)
    -- 匹配数满足，则true
    if rightCount == #(_needsList) / 2 then
        result = true
    end

    return result
end

--[[
    @desc: 合成新的道具，扣除相应所需道具
    author:{author}
    time:2019-08-07 20:01:37
    --@itemData: 需要合成的道具信息
]]
function StaticDataModel:SynItem(itemData)

    local _needsList = ModelTool:Split(itemData.SynNeeds)

    -- 遍历所需物品(由于SynNeeds的格式为ID,C,ID,C,ID,C，所以需要除以2)
    for i = 1, #(_needsList) / 2, 1 do

        -- 遍历玩家目前的所有道具
        for k, v in pairs(PlayerDataModel.playerData.Items) do
            -- 扣除玩家表里相应的道具
            v.Count = v.Count - tonumber(_needsList[2 * i])
            -- 如果道具数量为0，则去除此道具
            if v.Count == 0 then
                PlayerDataModel.playerData.Items[k] = nil
            end
        end

        for k, v in pairs(PlayerDataModel.CompletePlayerData.Items) do
            -- 扣除玩家表里相应的道具
            v.Count = v.Count - tonumber(_needsList[2 * i])
            -- 如果道具数量为0，则去除此道具
            if v.Count == 0 then
                PlayerDataModel.CompletePlayerData.Items[k] = nil
            end
        end
    end

end

-- 道具排序
-- key：要排序的key "Level"(等级品质)/"Price"(出售的价格)
-- changeWay：1 / -1
function StaticDataModel:SortItems(items, key, changeWay)
    for i = 1, #items do
        for j = 1, #items - i do
            local res = (tonumber(items[j][key]) - tonumber(items[j + 1][key])) * changeWay
            if res > 0 then
                items[j], items[j + 1] = items[j + 1], items[j]
            end
        end
    end
end


--[[
    @desc: 筛选道具
    author:{Jason}
    time:2019-08-07 20:53:57
    --@items:table：道具表
	--@key:string：要筛选的key
	--@value: string：要筛选的value
    @return:table：只包含指定key value的新table
]]
function StaticDataModel:ScreenItem(items, key, value)
    local newTable = {}
    local count = 1
    for k,v in pairs(items) do
        if v[key] == value then
            newTable[count] = v
            count = count + 1
        end
    end
    return newTable
end
