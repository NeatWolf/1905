PlayerDataModel = {}
-- 可读写路径
PlayerDataModel.FilePath = CS.UnityEngine.Application.persistentDataPath .. "/AccountData.json"
--print(CS.UnityEngine.Application.persistentDataPath)

-- 玩家的动态数据信息表
PlayerDataModel.PlayerData = {}
ModelTool:SetMeta(PlayerDataModel.PlayerData)
-- 玩家的动态数据信息表（合并后 完整的）
PlayerDataModel.CompletePlayerData = {}
ModelTool:SetMeta(PlayerDataModel.CompletePlayerData)

-- 动态数据初始化
function PlayerDataModel:Init()
    --if not CS.System.IO.File.Exists(self.FilePath) then
    -- 测试用：每次都初始化
    if false then
        return
    end
    -- 读取 玩家初始数据的策划静态表(json)
    local ta = ABManager:LoadAsset("json", "PlayerInit")
    -- 写入
    self:WriteIn(ta.text)
end

-- 读取 可读写路径中的数据
function PlayerDataModel:ReadOut()
    -- 从可读写路径中读取信息
    local str = CS.System.IO.File.ReadAllText(self.FilePath)
    self.PlayerData = JsonUtil.decode(str)

    -- 合并出完整信息
    self.CompletePlayerData = StaticDataModel:MergeData(self.PlayerData)

    return self.CompletePlayerData
end

-- 写入 可读写路径,提供table或文本或默认写入玩家数据
function PlayerDataModel:WriteIn(data)
    if type(data) == "string" then
        CS.System.IO.File.WriteAllText(self.FilePath, data)
    elseif type(data) == "table" then
        CS.System.IO.File.WriteAllText(self.FilePath, JsonUtil.encode(data))
    else
        CS.System.IO.File.WriteAllText(self.FilePath, JsonUtil.encode(self.PlayerData))
    end
end

function PlayerDataModel:RemoveNormalItem(itemID, count, isOnShelf)
    local itemData = {}
    -- 遍历玩家目前的所有道具
    for k, v in pairs(self.PlayerData.Items) do
        if itemID == v.ItemID and v.IsOnShelf == tostring(isOnShelf) then
            -- 扣除玩家表里相应的道具
            v.Count = tostring(tonumber(v.Count) - tonumber(count))
            -- 如果道具数量为0，则去除此道具
            if v.Count == "0" then
                self.PlayerData.Items[k] = nil
            end
            break
        elseif k == #self.PlayerData.Items then
            return nil
        end
    end
    for k, v in pairs(self.CompletePlayerData.Items) do
        if itemID == v.ItemID and v.IsOnShelf == tostring(isOnShelf) then
            v.Count = tostring(tonumber(v.Count) - tonumber(count))
            -- print("剩余数量：" .. v.Count)
            itemData = v
            if v.Count == "0" then
                self.CompletePlayerData.Items[k] = nil
                itemData = nil
            end
            break
        elseif k == #self.CompletePlayerData.Items then
            return nil
        end
    end
    return itemData
end

function PlayerDataModel:RemoveSynItem(itemID)
    for k,v in pairs(self.PlayerData.SynInsInfo.SynItems) do
        if v.ItemID == itemID then
            table.remove(self.PlayerData.SynInsInfo.SynItems, k)
            break
        end
    end
end




function PlayerDataModel:AddNormalItem(itemID, count, isOnShelf)
    count = count or 1
    isOnShelf = isOnShelf or false
    for k1, v1 in pairs(self.PlayerData.Items) do
        -- 如果有这个Item
        if v1.ItemID == itemID and v1.IsOnShelf == tostring(isOnShelf) then
            v1.Count = tostring(ModelTool:FormatNum(v1.Count + count))
            for _, v2 in pairs(self.CompletePlayerData.Items) do
                if v2.ItemID == itemID and v2.IsOnShelf == tostring(isOnShelf) then
                    v2.Count = tostring(ModelTool:FormatNum(v2.Count + count))
                    -- print("又合成了" .. v2.Count .. "个" .. v2.Name)
                    break
                end
            end
            break
        -- 如果没有这个Item
        elseif k1 == #(self.PlayerData.Items) then
            local newItem = {}
            newItem.ItemID = itemID
            newItem.Count = tostring(ModelTool:FormatNum(count))
            newItem.IsOnShelf = tostring(isOnShelf)
            -- 增加到玩家动态表
            table.insert(self.PlayerData.Items, newItem)

            -- 合并出完整道具信息
            local completeItem = StaticDataModel:MergeNormalItem(newItem)
            -- 增加到完整的玩家动态表
            table.insert(self.CompletePlayerData.Items, completeItem)

            -- print("合成了新的" .. completeItem.Count .. "个" .. completeItem.Name)
            break
            
            -- -- 测试打印
            -- ModelTool:SetMeta(completeItem)
            -- print(completeItem)
        end
    end
end

function PlayerDataModel:AddSynItem(itemID)
    for k1, v1 in pairs(StaticDataModel.ItemsTable) do
        -- 如果有这个Item
        if v1.ItemID == itemID then
            local newSynItem = {}
            newSynItem.ItemID = itemID
            newSynItem.SynTimer = "0"
            -- 增加到玩家动态表
            table.insert(self.PlayerData.SynInsInfo.SynItems, newSynItem)
            -- 合并出完整道具信息
            local completeItem = StaticDataModel:MergeSynItem(newSynItem)
            -- 增加到完整的玩家动态表
            table.insert(self.CompletePlayerData.SynInsInfo.SynItems, completeItem)
            break
        end
    end
end

--[[
    @desc: 更改玩家数据的商店等级/金币/钻石
    --@key: 哪个数据
	--@count: 多少
]]
function PlayerDataModel:AddData(key, count)
    self.PlayerData[key] = tostring(ModelTool:FormatNum(self.PlayerData[key] + count))
    self.CompletePlayerData[key] = tostring(ModelTool:FormatNum(self.CompletePlayerData[key] + count))
end



function PlayerDataModel:LotteryProp(type)
end
