StaticDataModel = {}

-- 所有的静态策划表
StaticDataModel.ItemsTable = {}
StaticDataModel.HerosTable = {}
StaticDataModel.MonstersTable = {}
StaticDataModel.NPCsTable = {}


-- 读取 所有的静态策划表
function StaticDataModel:ReadOut()
    -- 读取道具静态表
    local ta = ABManager:LoadAsset('json', 'ItemsTable')
    self.ItemsTable = JsonUtil.decode(ta.text)

    -- 读取英雄静态表
    ta = ABManager:LoadAsset('json', 'HerosTable')
    self.HerosTable = JsonUtil.decode(ta.text)

    -- 读取怪物静态表
    ta = ABManager:LoadAsset('json', 'MonstersTable')
    self.MonstersTable = JsonUtil.decode(ta.text)

    -- 读取怪物静态表
    ta = ABManager:LoadAsset('json', 'NPCsTable')
    self.NPCsTable = JsonUtil.decode(ta.text)
end


-- 合并出 完整的玩家数据信息
function StaticDataModel:MergeData(playerData)
    local finalData = {}
    
    finalData.User = playerData.User
    finalData.Password = playerData.Password
    finalData.Name = playerData.Name
    finalData.TexturePath = playerData.TexturePath
    finalData.StoreLevel = playerData.StoreLevel
    finalData.Money = playerData.Money
    finalData.Diamond = playerData.Diamond

    finalData.Heros = {}
    -- 合并完整的英雄信息表
    for i=1 , #playerData.Heros do
        for j=1 , #self.HerosTable do
            -- 如果ID匹配，则合并信息
            if playerData.Heros[i].HeroID == self.HerosTable[j].HeroID then

                local heroNow = {}
                -- 动态表的数据
                heroNow.HeroID = playerData.Heros[i].HeroID
                heroNow.Level = playerData.Heros[i].Level
                heroNow.EnergyMax = playerData.Heros[i].EnergyMax
                heroNow.EnergyNow = playerData.Heros[i].EnergyNow
                heroNow.ColBuff = playerData.Heros[i].ColBuff
                heroNow.InsBuff = playerData.Heros[i].InsBuff
                -- 静态表的数据
                heroNow.Name = self.HerosTable[j].Name
                heroNow.Age = self.HerosTable[j].Age
                heroNow.Gender = self.HerosTable[j].Gender
                heroNow.TexturePath = self.HerosTable[j].TexturePath
                heroNow.InsID = self.HerosTable[j].InsID
                heroNow.Speak1 = self.HerosTable[j].Speak1
                heroNow.Speak2 = self.HerosTable[j].Speak2
                heroNow.Speak3 = self.HerosTable[j].Speak3

                table.insert(finalData.Heros , heroNow)
            end
        end
    end


    finalData.Items = {}
    -- 合并完整的道具信息表
    for i=1 , #playerData.Items do
        for j=1 , #self.ItemsTable do
            -- 如果ID匹配，则合并信息
            if playerData.Items[i].HeroID == self.ItemsTable[j].HeroID then
                
                local itemNow = {}
                -- 动态表的数据
                itemNow.ItemID = playerData.Items[i].ItemID
                itemNow.Count = playerData.Items[i].Count
                -- 静态表的数据
                itemNow.Name = self.ItemsTable[j].Name
                itemNow.Image = self.ItemsTable[j].Name
                itemNow.TexturePath = self.ItemsTable[j].TexturePath
                itemNow.Type = self.ItemsTable[j].Type
                itemNow.Level = self.ItemsTable[j].Level
                itemNow.ObMethods = self.ItemsTable[j].ObMethods
                itemNow.Prices = self.ItemsTable[j].Prices
                itemNow.HeroBuff = self.ItemsTable[j].HeroBuff
                itemNow.SuitID = self.ItemsTable[j].SuitID
                itemNow.SynNeeds = self.ItemsTable[j].SynNeeds
                itemNow.SynTime = self.ItemsTable[j].SynTime
                itemNow.Description = self.ItemsTable[j].Description

                table.insert(finalData.Items , itemNow)
            end
        end
    end

    -- 返回 完整的玩家数据表
    return finalData

end




-- 判断此道具目前是否可合成
-- 参数1(table)：目前玩家的所有道具
-- 参数2(string)：需要进行判断的合成物ID
function StaticDataModel:CheckCouldSyn(playerData,synItemID)
    -- 最终结果
    local result = false
    -- 拷贝一份玩家道具数据
    local _copyPlayerItems = ModelTool:CopyTable(playerData.Items)

    -- 遍历静态策划表，获取此装备合成所需的道具列表
    local _needsList = nil
    for _,v in pairs(self.ItemsTable)
    do
        if v.ItemID == synItemID then
            _needsList = ModelTool:Split(v.SynNeeds , ",")
            break
        end
    end

    if _needsList == nil then
        print("_needsList为空，未得到合成此道具所需的物品")
        return
    end

    -- 匹配数 满足一个条件+1
    local rightCount = 0
    -- 遍历所需物品(由于SynNeeds的格式为ID,C,ID,C,ID,C，所以需要除以2)
    for i=1 , #(_needsList)/2 , 1
    do
        -- 遍历玩家目前的所有道具
        for k,v in pairs(_copyPlayerItems)
        do
            -- 如果ID匹配，且数量满足
            if v.ItemID == _needsList[2*i-1] and v.Count >= _needsList[2*i] then
                -- 扣除Copy表里相应的道具
                v.Count = v.Count - _needsList[2*i]
                -- 匹配数+1
                rightCount = rightCount + 1
                -- 如果道具数量为0，则去除此道具
                if v.Count == 0 then
                    _copyPlayerItems[k] = nil
                end
            end
        end
    end

    -- print("rightCount:" .. rightCount)
    -- 匹配数满足，则true
    if rightCount == #(_needsList)/2 then
        result = true
    end
    
    return result,_copyPlayerItems

end



function StaticDataModel:SortBy( )
    
end