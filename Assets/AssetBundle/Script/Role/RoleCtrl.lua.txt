RoleCtrl = {}

-- 预制体上的UISubObject脚本，内含所有UI对象
RoleCtrl.Panel = nil
RoleCtrl.LevelWindow = nil
-- 当前选择的角色在子物体中的Index
-- RoleCtrl.currentIndex = -1
-- 当前选择的角色数据
RoleCtrl.CurrentHero = nil
 
RoleCtrl.RoleSelectAniCSharp = nil

function RoleCtrl:Init()
    print("进入角色管理")
    local _Obj = LoadManager:Load(ABManager:LoadAsset("prefab", "RoleManUI"), "UI", true)
    self.Panel = _Obj:GetComponent("UISubObject")
    self.Ani = _Obj:GetComponent("RoleManAnimation")
    -- self.LevelWindow = self.Panel.go[3]:GetComponent("UISubObject")

    -- 添加委托
    -- 返回按钮
    self.Panel.buttons[0].onClick:AddListener(
        function()
            UICtrl:Back2MainScene()
        end
    )
    -- 升级按钮
    self.Panel.buttons[1].onClick:AddListener(
        function()
            self.Panel.go[3]:SetActive(true)
            LevelCtrl:ShowLevelInfo(self.CurrentHero)
        end
    )

    LoadManager:LoadLua("Role", "RoleView")
    LoadManager:LoadLua("Role", "LevelCtrl")
    LevelCtrl:Init()
    LoadManager:LoadLua("Role", "DetailCtrl")
    DetailCtrl:Init()

    -- 按ID排序 可在每次抽卡后就进行排序
    StaticDataModel:SortHeroByHeroID(PlayerDataModel.CompletePlayerData.Heros)
    StaticDataModel:SortHeroByHeroID(PlayerDataModel.PlayerData.Heros)
    -- 调取View 加载显示英雄列表
    RoleView:ShowHerosList(PlayerDataModel.CompletePlayerData.Heros)

    -- 英雄列表的Content上的动画CSharp脚本
    self.RoleSelectAniCSharp = self.Panel.go[2]:GetComponent("RolePanelSelectAnimation")
    self.RoleSelectAniCSharp:Init()
    self.RoleSelectAniCSharp.changeRoleEvent = function() self:ChangeCurrentRole() end

    -- 切换当前英雄为列表第一个
    self:ChangeCurrentRole()

end


-- 切换英雄
function RoleCtrl:ChangeCurrentRole()
    self.CurrentHero = ModelTool:CopyTable( PlayerDataModel.CompletePlayerData.Heros[self.RoleSelectAniCSharp.currentRoleID + 1] )
    -- print(PlayerDataModel.CompletePlayerData.Heros[self.RoleSelectAniCSharp.currentRoleID + 1].Equips)
    print("当前角色改变为：" .. self.RoleSelectAniCSharp.currentRoleID + 1)
    RoleView:ShowHeroInfo(self.CurrentHero)
end


