MakerCtrl = {}
-- 预制体上的UISubObject脚本，内含所有UI对象
MakerCtrl.Panel = nil

MakerCtrl.RightItems = nil

local Tag1 = "Food"
local Tag2 = "Prop"
local Tag3 = "Equipment"

local SortWay1 = "Level"
local SortWay2 = "Price"

-- 记录筛选条件
MakerCtrl.Tag = Tag1
-- 记录排序条件
MakerCtrl.SortWay = SortWay1
MakerCtrl.ChangeWay = 1

-- 当前选中的道具
MakerCtrl.ItemChoice = nil

function MakerCtrl:Init()
    print("进入制品手造")
    self.Panel = LoadManager:Load(ABManager:LoadAsset("prefab", "FabricateUI"), "UI", true):GetComponent("UISubObject")
    self:ShowItems()

    self.Panel.toggles[1].onValueChanged:AddListener( function(isTrue) self:changeTag(isTrue) end)
    self.Panel.toggles[2].onValueChanged:AddListener( function()
        if self.Panel.toggles[1].isOn == true then
            self.Tag = Tag2
        end
        self:ShowItems()
    end)
    self.Panel.toggles[3].onValueChanged:AddListener( function()
        if self.Panel.toggles[1].isOn == true then
            self.Tag = Tag3
        end
        self:ShowItems()
    end)

end

 function MakerCtrl:changeTag(isTrue)
    if isTrue == true then
        self.Tag = Tag1
    end
    self:ShowItems()
end

function MakerCtrl:ShowHeros()
    local _herosList = {}
    if self.Tag == Tag1 then
        _herosList = StaticDataModel:ScreenItem(PlayerDataModel.CompletePlayerData.Heros, "InsBuff", 1, "2")
    elseif self.Tag == Tag2 then
        _herosList = StaticDataModel:ScreenItem(PlayerDataModel.CompletePlayerData.Heros, "InsBuff", 1, "3")
    elseif self.Tag == Tag3 then
        _herosList = StaticDataModel:ScreenItem(PlayerDataModel.CompletePlayerData.Heros, "InsBuff", 1, "4", "5", "6", "7", "8", "9")
    end

    for k, v in pairs(_herosList) do
        print(_herosList[k].InsBuff)
    end
end

-- 依序显示当前条件下的所有道具
function MakerCtrl:ShowItems()
    self.ItemChoice = nil
    self.RightItems = {}

    local items = {}
    if self.Tag == Tag1 then
        items = StaticDataModel:ScreenItem(StaticDataModel.ItemsTable, "Type", 1, "2")
    elseif self.Tag == Tag2 then
        items = StaticDataModel:ScreenItem(StaticDataModel.ItemsTable, "Type", 1, "3")
    elseif self.Tag == Tag3 then
        items = StaticDataModel:ScreenItem(StaticDataModel.ItemsTable, "Type", 1, "4")
    end

    -- 筛选出可合成的道具
    self:CheckAllSyn(items)
    StaticDataModel:SortItems(items, "CouldSyn", "true", self.SortWay, self.ChangeWay)

    -- 已经排好序的道具列表
    --ModelTool:SetMeta(items1)
    --print(items1)

    -- for k , v in pairs(items) do
    --     local go = ABManager:LoadAsset("prefab", "Button")
    --     local img = ABManager:LoadAsset("texture", "Test")
    --     go:GetComponent("Image").sprite = img

    --     self.RightItems[k] = LoadManager:Load(go,"Fabricate_Right/BG_List/FabricateList_Scroll/Viewport/Content",true)

    --     --self.RightItems[k]:GetComponent("Image").color = CS.UnityEngine.Color.white
    --     --self.RightItems[k]:GetComponent("Image").sprite = img
    --     if self.RightItems[k]:GetComponent("Image").sprite == nil then
    --         print("111111")
    --     end
    --     print("img:" .. img.name)
    --     print(self.RightItems[k]:GetComponent("Image").name)

    --     self.RightItems[k].transform:Find("Text"):GetComponent("Text").text = ""

    -- end

    for k , v in pairs(items) do
        local RightContent = CS.UnityEngine.GameObject.Find("Fabricate_Right/BG_List/FabricateList_Scroll/Viewport/Content")
        local go = ABManager:LoadAsset("prefab", "Button")
        self.RightItems[k] = LoadManager:Load(go,RightContent.transform,true)

        self.RightItems[k]:GetComponent("Button").onClick:AddListener(function()
            self.ItemChoice = v
            ModelTool:SetMeta(self.ItemChoice)
            print(self.ItemChoice)
            self:ShowSynNeeds()
        end
        )
        -- 显示图片
        self.RightItems[k]:GetComponent("Image").sprite = ABManager:LoadAsset("texture", "Test")

        self.RightItems[k].transform:Find("Text"):GetComponent("Text").text = ""

    end

    self.ItemChoice = items[1]
    self:ShowSynNeeds()
end

-- 选中某道具
function MakerCtrl:ShowSynNeeds()
    local _needsList = {}

    -- 获取合成所需(id,count,id,count,...)
    for k, v in pairs(StaticDataModel.ItemsTable) do
        if v.ItemID == self.ItemChoice.ItemID then
            _needsList = v.SynNeeds
            _needsList = ModelTool:SplitStr(_needsList)
            break
        end
    end

    print(_needsList[2] .. _needsList[4])
    for i = 1, 3, 1 do
        if _needsList[2 * i - 1] ~= nil then
            -- 遍历玩家目前的所有道具
            for k, v in pairs(PlayerDataModel.CompletePlayerData.Items) do
                -- 如果ID匹配
                if v.ItemID == _needsList[2 * i - 1] then
                    -- 显示数量
                    print(_needsList[2*i])
                    self.Panel.buttons[i].gameObject.transform:Find("Text"):GetComponent("Text").text = _needsList[2*i] .. "/" .. v.Count
                    if tonumber(v.Count) >= tonumber(_needsList[2*i]) then
                        -- 显示图片
                        -- v.TexturePath
                    else
                        -- 显示图片
                        -- v.TexturePath
                    end
                    break
                -- 如果ID没有匹配到
                elseif k == #(PlayerDataModel.CompletePlayerData.Items) then
                    self.Panel.buttons[i].gameObject.transform:Find("Text"):GetComponent("Text").text = _needsList[2*i] .. "/0"
                end
            end
        else
            self.Panel.buttons[i].gameObject.transform:Find("Text"):GetComponent("Text").text = ""
        end
    end
end

-- 判断此道具目前是否可合成
-- 参数1(string)：需要进行判断的合成物ID
local function CheckCouldSyn(synItemID)
    -- 最终结果
    local result = false

    -- 遍历静态策划表，获取此装备合成所需的道具列表
    local _needsList = nil
    for _, v in pairs(StaticDataModel.ItemsTable) do
        if v.ItemID == synItemID then
            _needsList = ModelTool:SplitStr(v.SynNeeds)
            break
        end
    end

    if _needsList == nil then
        print("_needsList为空，未得到合成此道具所需的物品")
        return
    end

    -- 匹配数 满足一个条件+1
    local rightCount = 0
    -- 遍历所需物品(由于SynNeeds的格式为ID,C,ID,C,ID,C，所以需要除以2)
    for i = 1, #(_needsList) / 2, 1 do
        -- 遍历玩家目前的所有道具
        for k, v in pairs(PlayerDataModel.PlayerData.Items) do
            -- 如果ID匹配，且数量满足
            if v.ItemID == _needsList[2 * i - 1] and tonumber(v.Count) >= tonumber(_needsList[2 * i]) then
                -- 匹配数+1
                rightCount = rightCount + 1
            end
        end
    end

    -- print("rightCount:" .. rightCount)
    -- 匹配数满足，则true
    if rightCount == #(_needsList) / 2 then
        result = true
    end

    return result
end

--[[
    @desc: 检查所有道具，修改它的属性（是否可以合成）
    author:{author}
    time:2019-08-07 20:56:57
    --@items: 筛选过后 当前所有所需显示的道具表
]]
function MakerCtrl:CheckAllSyn(items)
    for k, v in pairs(items) do
        items[k].CouldSyn = tostring(CheckCouldSyn(v.ItemID))
    end
end

--[[
    @desc: 合成新的道具，扣除相应所需道具
    author:{author}
    time:2019-08-07 20:01:37
    --@itemData: 需要合成的道具信息
]]
function MakerCtrl:SynItem(itemData)
    local _needsList = ModelTool:SplitStr(itemData.SynNeeds)

    -- 遍历所需物品(由于SynNeeds的格式为ID,C,ID,C,ID,C，所以需要除以2)
    for i = 1, #(_needsList) / 2, 1 do
        -- 遍历玩家目前的所有道具
        for k, v in pairs(PlayerDataModel.PlayerData.Items) do
            -- 扣除玩家表里相应的道具
            v.Count = tostring(v.Count - tonumber(_needsList[2 * i]))
            -- 如果道具数量为0，则去除此道具
            if v.Count == "0" then
                PlayerDataModel.playerData.Items[k] = nil
            end
        end

        for k, v in pairs(PlayerDataModel.CompletePlayerData.Items) do
            -- 扣除玩家表里相应的道具
            v.Count = tostring(v.Count - tonumber(_needsList[2 * i]))
            -- 如果道具数量为0，则去除此道具
            if v.Count == "0" then
                PlayerDataModel.CompletePlayerData.Items[k] = nil
            end
        end
    end
end
